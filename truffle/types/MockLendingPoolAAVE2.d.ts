/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface MockLendingPoolAAVE2Contract
  extends Truffle.Contract<MockLendingPoolAAVE2Instance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<MockLendingPoolAAVE2Instance>;
}

type AllEvents = never;

export interface MockLendingPoolAAVE2Instance extends Truffle.ContractInstance {
  /**
   * Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User deposits 100 USDC and gets in return 100 aUSDC
   * @param amount The amount to be deposited
   * @param asset The address of the underlying asset to deposit
   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet
   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man*
   */
  deposit: {
    (
      asset: string,
      amount: number | BN | string,
      onBehalfOf: string,
      referralCode: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      asset: string,
      amount: number | BN | string,
      onBehalfOf: string,
      referralCode: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      asset: string,
      amount: number | BN | string,
      onBehalfOf: string,
      referralCode: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      asset: string,
      amount: number | BN | string,
      onBehalfOf: string,
      referralCode: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC
   * @param amount The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance
   * @param asset The address of the underlying asset to withdraw
   * @param to Address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet
   */
  withdraw: {
    (
      asset: string,
      amount: number | BN | string,
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      asset: string,
      amount: number | BN | string,
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      asset: string,
      amount: number | BN | string,
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      asset: string,
      amount: number | BN | string,
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User deposits 100 USDC and gets in return 100 aUSDC
     * @param amount The amount to be deposited
     * @param asset The address of the underlying asset to deposit
     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet
     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man*
     */
    deposit: {
      (
        asset: string,
        amount: number | BN | string,
        onBehalfOf: string,
        referralCode: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        asset: string,
        amount: number | BN | string,
        onBehalfOf: string,
        referralCode: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        asset: string,
        amount: number | BN | string,
        onBehalfOf: string,
        referralCode: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        asset: string,
        amount: number | BN | string,
        onBehalfOf: string,
        referralCode: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC
     * @param amount The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance
     * @param asset The address of the underlying asset to withdraw
     * @param to Address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet
     */
    withdraw: {
      (
        asset: string,
        amount: number | BN | string,
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        asset: string,
        amount: number | BN | string,
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        asset: string,
        amount: number | BN | string,
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        asset: string,
        amount: number | BN | string,
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
